@export ssao.fragment

uniform sampler2D gBufferTex;
uniform sampler2D depthTex;

uniform sampler2D noiseTex;

uniform vec2 gBufferTexSize;

uniform vec2 noiseTexSize;

uniform vec2 viewportSize;

uniform mat4 projection;

uniform mat4 projectionInv;

uniform mat4 viewInverseTranspose;

uniform vec3 kernel[KERNEL_SIZE];

uniform float radius : 1.5;

uniform float power : 2;

varying vec2 v_Texcoord;

#ifdef DEPTH_ENCODED
@import buildin.util.decode_float
#endif

vec3 ssaoEstimator(in mat3 kernelBasis, in vec3 originPos) {
    float occlusion = 0.0;

    vec3 tmp = kernelBasis * kernel[0] * radius + originPos;
    vec4 texCoord = projection * vec4(tmp, 1.0);
    texCoord.xy /= texCoord.w;

    for (int i = 0; i < KERNEL_SIZE; i++) {
        vec3 samplePos = kernelBasis * kernel[i];
        samplePos = samplePos * radius + originPos;

        vec4 texCoord = projection * vec4(samplePos, 1.0);
        texCoord.xy /= texCoord.w;

        vec4 depthTexel = texture2D(depthTex, texCoord.xy * 0.5 + 0.5);
#ifdef DEPTH_ENCODED
        depthTexel.rgb /= depthTexel.a;
        float sampleDepth = decodeFloat(depthTexel) * 2.0 - 1.0;
#else
        float sampleDepth = depthTexel.r * 2.0 - 1.0;
#endif

        sampleDepth = projection[3][2] / (sampleDepth * projection[2][3] - projection[2][2]);

        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - sampleDepth));
        occlusion += rangeCheck * step(samplePos.z, sampleDepth);
    }
    occlusion = 1.0 - occlusion / float(KERNEL_SIZE);
    return vec3(pow(occlusion, power));
}

void main()
{
    vec2 uv = gl_FragCoord.xy / viewportSize;

    vec4 tex = texture2D(gBufferTex, uv);

    // Is empty
    if (dot(tex.rgb, vec3(1.0)) == 0.0) {
        discard;
    }

    vec3 N = tex.rgb * 2.0 - 1.0;

    // Convert to view space
    N = (viewInverseTranspose * vec4(N, 0.0)).xyz;


    vec4 depthTexel = texture2D(depthTex, uv);
#ifdef DEPTH_ENCODED
    depthTexel.rgb /= depthTexel.a;
    float z = decodeFloat(depthTexel) * 2.0 - 1.0;
#else
    float z = depthTexel.r * 2.0 - 1.0;
#endif

    vec4 projectedPos = vec4(uv * 2.0 - 1.0, z, 1.0);
    vec4 p4 = projectionInv * projectedPos;

    vec3 position = p4.xyz / p4.w;

    vec2 noiseTexCoord = gBufferTexSize / vec2(noiseTexSize) * v_Texcoord;
    vec3 rvec = texture2D(noiseTex, noiseTexCoord).rgb * 2.0 - 1.0;

    // Tangent
    vec3 T = normalize(rvec - N * dot(rvec, N));
    // Bitangent
    vec3 BT = normalize(cross(N, T));
    mat3 kernelBasis = mat3(T, BT, N);

    gl_FragColor = vec4(vec3(ssaoEstimator(kernelBasis, position)), 1.0);
}

@end


@export ssao.blur.fragment

uniform sampler2D texture;

uniform vec2 textureSize;

varying vec2 v_Texcoord;

void main ()
{
    vec2 texelSize = 1.0 / textureSize;

    // gl_FragColor.rgba = texture2D(texture, v_Texcoord);

    vec4 color = vec4(0.0);
    vec2 hlim = vec2(float(-BLUR_SIZE) * 0.5 + 0.5);
    for (int x = 0; x < BLUR_SIZE; x++) {
        for (int y = 0; y < BLUR_SIZE; y++) {
            vec2 coord = (vec2(float(x), float(y)) + hlim) * texelSize + v_Texcoord;
            color += texture2D(texture, coord);
        }
    }

    gl_FragColor = color / (float(BLUR_SIZE) * float(BLUR_SIZE));
}
@end