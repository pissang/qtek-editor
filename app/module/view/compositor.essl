@export bd.compositor.bright

uniform sampler2D texture;
uniform float threshold : 1;
uniform float scale : 1.0;

varying vec2 v_Texcoord;

const vec3 lumWeight = vec3(0.2125, 0.7154, 0.0721);

void main()
{
#ifdef TEXTURE_ENABLED
    vec4 tex = texture2D(texture, v_Texcoord);
#else
    vec4 tex = vec4(0.0);
#endif

    float lum = dot(tex.rgb, lumWeight);
    if (lum > threshold)
    {
        gl_FragColor.rgba = tex * scale;
    }
    else
    {
        gl_FragColor = vec4(0.0);
    }
}
@end



@export bd.compositor.blend
// Blend at most 4 textures
#ifdef TEXTURE1_ENABLED
uniform sampler2D texture1;
uniform float weight1 : 1.0;
#endif
#ifdef TEXTURE2_ENABLED
uniform sampler2D texture2;
uniform float weight2 : 1.0;
#endif

varying vec2 v_Texcoord;

void main()
{
    vec4 tex = vec4(0.0);
#ifdef TEXTURE1_ENABLED
    // Premultiplied alpha
    vec4 tex1 = texture2D(texture1, v_Texcoord);
    tex1.rgb *= tex1.a;
    tex += tex1 * weight1;
#endif
#ifdef TEXTURE2_ENABLED
    vec4 tex2 = texture2D(texture2, v_Texcoord);
    tex2.rgb *= tex2.a;
    tex += tex2 * weight2;
#endif

    tex.rgb /= tex.a + 0.00001;

    gl_FragColor = tex;
}
@end